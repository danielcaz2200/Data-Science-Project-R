flights %>% filter(year==2013, month==3, day==12)
#2
summary(flights)
#2
flights %>% filter(dep_delay>2, arr_delay>2)
#3
flights %>% filter(dep_delay>2 | arr_delay>2)
#4
View(flights)
#4
flights %>% filter(carrier=="UA" | carrier=="AA" | carrier=="DL")
#5
help(flights)
flights %>% arrange(air_time)
flights %>% arrange(air_time) %>% View()
flights %>% arrange(-air_time) %>% select(air_time)
flights %>% arrange(air_time) %>% select(air_time)
#6
flights %>% arrange(-air_time)
#6
flights %>% arrange(-air_time) %>% View()
#7
flights %>% arrange(air_time) %>% select(origin, dest)
#7
flights %>% arrange(-air_time) %>% select(origin, dest)
#8
flights %>% mutate(total_delay=(dep_delay+arr_delay)) %>% View()
#9
flights %>% arrange(-total_delay) %>% select(origin, dest)
#8
flights %>% mutate(total_delay=(dep_delay+arr_delay))
#9
flights %>% arrange(-total_delay) %>% select(origin, dest)
flights %>% arrange(air_time)
flights %>% mutate(total_delay=(dep_delay+arr_delay))
flights %>% mutate(total_delay=(dep_delay+arr_delay))
flights %>% arrange(-total_delay) %>% select(origin, dest)
#8
flights %>% mutate(total_delay=(dep_delay+arr_delay))
#9
flights %>% arrange(-total_delay) %>% select(origin, dest)
#8
flights %>% mutate(total_delay=dep_delay+arr_delay)
#9
flights %>% arrange(-total_delay) %>% select(origin, dest)
#9
flights %>% mutate(total_delay=dep_delay+arr_delay) %>%
arrange(-total_delay) %>% select(origin, dest)
#10
flights %>% mutate(total_delay=dep_delay+arr_delay) %>%
arrange(-total_delay) %>% View()
#10
flights %>% mutate(total_delay=dep_delay+arr_delay) %>%
arrange(-total_delay) %>% select(origin,dest) %>% slice(1:10)
#5
flights %>% arrange(air_time)
#5
flights %>% arrange(air_time) %>% View()
library(tidyverse)
library(nycflights13)
flights %>% summarise(mean(arr_delay))
flights %>% summarise(mean(arr_delay))
flights %>% summarise(mean(arr_delay))
flights
library(tidyverse)
flights %>% summarise(mean(arr_delay))
flights %>% summarise(mean(arr_delay, na.rm = TRUE))
flights %>% summarise(mean(arr_delay, na.rm = TRUE))
flights %>% summarise(avg_arrival_delay=mean(arr_delay, na.rm = TRUE))
flights %>% summarise(avg_arr_delay=mean(arr_delay, na.rm = TRUE))
#2
help(flights)
flights %>% group_by(origin) %>% summarise(avg_arr_delay=mean(arr_delay, na.rm = TRUE))
flights %>% group_by(origin) %>% summarise(avg_arr_delay=mean(arr_delay, na.rm = TRUE)) %>% View()
flights
flights %>% group_by(origin, dest) %>% summarise(avg_arr_delay=mean(arr_delay, na.rm = TRUE))
#3
flights %>% group_by(origin,dest) %>% summarise(avg_arr_delay=mean(arr_delay, na.rm = TRUE))
#4
bands
#4
band_members
bands <- tibble(name=c("Mick", "John", "Paul", "Paul"),
lastname=c("Jagger","Lennon", "McCartney", "McCartney"),
band=c("Stones", "Beatles", "Beatles", "Wings"),
year=c(1962,1960,1960,1971))
bands
instruments <- tibble(artist=c("John", "Paul", "Keith", "Paul"),
artistname=c("Lennon","McCartney", "Richards", "McCartney"),
plays=c("guitar", "bass", "guitar", "bass"),
year=c("Gibson", "Hofner", "Fender", "Hofner"))
bands %>% inner_join(instruments)
instruments <- tibble(artist=c("John", "Paul", "Keith", "Paul"),
artistname=c("Lennon","McCartney", "Richards", "McCartney"),
plays=c("guitar", "bass", "guitar", "bass"),
model=c("Gibson", "Hofner", "Fender", "Hofner"))
bands %>% inner_join(instruments)
#2b.
bands %>% inner_join(instruments, by=c(name="artist"))
#2b.
bands %>% inner_join(instruments, by=c(name="artist"))
#2b.
bands %>% inner_join(instruments, by=c(name="artist"))
#3c.
bands %>% inner_join(instruments, by=c(name="artist", lastname="artistname"))
#3c.
bands %>% inner_join(instruments, by=c(name="artist", lastname="artistname"))
#2b.
bands %>% inner_join(instruments, by=c(name="artist"))
# 2a.
bands %>% inner_join(instruments)
#2b.
bands %>% inner_join(instruments, by=c(name="artist"))
#3c.
bands %>% inner_join(instruments, by=c(name="artist", lastname="artistname"))
#2d
bands %>% left_join(instruments, by=c(name="artist", lastname="artistname"))
#4
bands <- tibble(name=c("Mick", "John", "Paul", "Paul"),
lastname=c("Jagger","Lennon", "McCartney", "McCartney"),
band=c("Stones", "Beatles", "Beatles", "Wings"),
year=c(1962,1960,1960,1971))
instruments <- tibble(artist=c("John", "Paul", "Keith", "Paul"),
artistname=c("Lennon","McCartney", "Richards", "McCartney"),
plays=c("guitar", "bass", "guitar", "bass"),
model=c("Gibson", "Hofner", "Fender", "Hofner"))
# 2a.
bands %>% inner_join(instruments)
bands %>% inner_join(instruments, by=c(name="artist", lastname="artistname", year="plays"))
#2e
bands %>% inner_join(instruments, by=c(name="artist", lastname="artistname", year="plays"))
billboard
billboard %>% View()
help("billboard")
#3b
billboard_tidy <- pivot_longer(cols=3:76, names_to="week", values_to="rank")
#3b
billboard_tidy <- billboard %>% pivot_longer(cols=3:76, names_to="week", values_to="rank")
#3b
billboard_tidy <- billboard %>% pivot_longer(cols=3:76, names_to="week", values_to="rank")
#3b
billboard_tidy <- billboard %>% pivot_longer(cols=3:76, names_to="week", values_to="rank")
#3b
billboard_tidy <- billboard %>% pivot_longer(cols=4:76, names_to="week", values_to="rank")
billboard_tidy
#3b
billboard_tidy <- billboard %>% pivot_longer(cols=4:76, names_to="week", values_to="rank")
billboard_tidy
billboard %>% View()
#3b
billboard_tidy <- billboard %>% pivot_longer(cols=4:47, names_to="week", values_to="rank")
billboard_tidy
billboard_tidy
#3b
billboard_tidy <- billboard %>% pivot_longer(cols=4:47, names_to="week", values_to="rank")
billboard_tidy
#3b
billboard_tidy <- billboard %>% pivot_longer(cols=4:47, names_to="week", values_to="rank")
billboard_tidy
billboard %>% View()
#3b
billboard_tidy <- billboard %>% pivot_longer(cols=4:80, names_to="week", values_to="rank")
#3b
billboard_tidy <- billboard %>% pivot_longer(cols=4:79, names_to="week", values_to="rank")
billboard_tidy
table4a
#3b
billboard_tidy <- billboard %>% pivot_longer(cols=-date.entered, names_to="week", values_to="rank")
#3b
billboard_tidy <- billboard %>% pivot_longer(cols=-date.entered, names_to="week", values_to="rank")
#3b
billboard_tidy <- billboard %>% pivot_longer(cols=-date.enter, names_to="week", values_to="rank")
#3b
billboard_tidy <- billboard %>% pivot_longer(cols=-date.enter, names_to="week", values_to="rank")
#3b
billboard_tidy <- billboard %>% pivot_longer(cols=-date.entered, names_to="week", values_to="rank")
#3b
billboard_tidy <- billboard %>% pivot_longer(cols=-(artist, track, date.entered), names_to="week", values_to="rank")
#3b
billboard_tidy <- billboard %>% pivot_longer(cols=-c(artist, track, date.entered), names_to="week", values_to="rank")
billboard_tidy
billboard_tidy %>% group_by(track) %>% summarise(n())
airquality %>% summarise(n())
billboard_tidy %>% group_by(track)
airquality %>% summarise(n()) %>% summarise(n()) %>% View()
billboard_tidy %>% group_by(track) %>% summarise(n()) %>% View()
billboard_tidy %>% group_by(track) %>% summarise(Weeks=sum(week))
billboard_tidy %>% group_by(track) %>% summarize(Sum(week))
billboard_tidy %>% group_by(track) %>% summarize(sum(week))
billboard_tidy %>% group_by(track) %>% summarize(sum(week))
billboard_tidy %>% group_by(track) %>% summarize(n())
billboard_tidy %>% group_by(track) %>% summarize(n()) %>% View()
billboard_tidy %>% group_by(artist, track)
billboard_tidy %>% group_by(artist, track) %>% summarise(n())
billboard_tidy
billboard_tidy %>% count(artist, track)
billboard_tidy %>% count(artist, track) %>% View()
billboard_tidy %>% group_by(artist, track) %>% summarise(weeks_on_billboard=n())
billboard_tidy
billboard_tidy %>% group_by(artist,track) %>% summarise(weeks_on_billboard=n_distinct(week, na.rm=TRUE))
billboard_tidy %>% group_by(artist,track) %>% summarise(weeks_on_billboard=n_distinct(week))
billboard_tidy %>% group_by(artist,track) %>% summarise(weeks_on_billboard=n_distinct(week)) %>% View()
billboard_tidy <- billboard %>% pivot_longer(cols=-c(artist, track, date.entered), names_to="week", values_to="rank", values_drop_na = TRUE)
#3d
tidy_billboard %>% group_by(track) %>% summarise(total_weeks=n())
#3d
billboard_tidy %>% group_by(track) %>% summarise(total_weeks=n())
#3d
billboard_tidy %>% group_by(track) %>% summarise(n())
#3d
billboard_tidy %>% group_by(track) %>% summarise(weeks_on_bb = n())
#3d
billboard_tidy %>% group_by(track) %>% summarise(weeks_on_bb = n()) %>% arrange(-weeks_on_bb)
#2d
bands %>% left_join(instruments, by=c(name="artist", lastname="artistname"))
#3e
billboard_tidy %>% group_by(track)
#3e
billboard_tidy %>% group_by(track) %>% summarise(top_rank = max(rank)
#3e
billboard_tidy %>% group_by(track) %>% summarise(top_rank = max(rank))
#3e
billboard_tidy %>% group_by(track) %>% summarise(top_rank = max(rank))
#3e
billboard_tidy %>% group_by(track) %>% summarise(top_rank = min(rank))
#3e
billboard_tidy %>% group_by(track) %>% summarise(top_rank = min(rank)) %>% View()
help("billboard")
#3e
billboard_tidy %>% group_by(track) %>% summarise(top_rank = min(rank)) %>% arrange(top_rank)
#3e
billboard_tidy %>% group_by(track) %>% summarise(top_rank = min(rank)) %>% arrange(-top_rank)
#3e
billboard_tidy %>% group_by(track) %>% summarise(top_rank = min(rank)) %>% arrange(top_rank)
#3g
billboard_tidy %>% group_by(artist) %>% summarise(artist_top_rank = min(rank))
#3h
billboard_tidy %>% group_by(artist) %>% summarise(artist_top_rank = min(rank)) %>% arrange(top_rank)
#3h
billboard_tidy %>% group_by(artist) %>% summarise(artist_top_rank = min(rank)) %>% arrange(artist_top_rank)
#3i
billboard_tidy %>% group_by(track) %>% summarise(weeks_on_bb = n())
#3i
billboard_tidy %>% group_by(track) %>% summarise(weeks_on_bb = n()) %>% filter(weeks_on_bb == 1)
#3i
billboard_tidy %>% group_by(track) %>% summarise(weeks_on_bb = n()) %>% filter(weeks_on_bb == 1) %>% select(track)
#3i
billboard_tidy %>% group_by(track) %>% summarise(weeks_on_bb = n()) %>% filter(weeks_on_bb == 1)
#3i
billboard_tidy %>% group_by(track, artist) %>% summarise(weeks_on_bb = n()) %>% filter(weeks_on_bb == 1)
#3h
billboard_tidy %>% group_by(artist) %>% summarise(artist_top_rank = min(rank)) %>% arrange(artist_top_rank)
#3i
billboard_tidy %>% group_by(track, artist) %>% summarise(weeks_on_bb = n()) %>% filter(weeks_on_bb == 1)
#3i
billboard_tidy %>% group_by(track) %>% summarise(weeks_on_bb = n()) %>% filter(weeks_on_bb == 1)
#3j
billboard_tidy %>% group_by(track, artist) %>% summarise(weeks_on_bb = n()) %>% filter(weeks_on_bb == 1)
#2b.
bands %>% inner_join(instruments, by=c(name="artist"))
billboard
library(tidyverse)
billboard
m <- lm(data=iris, formula=Petal.Length~Petal.Width)
m <- lm(data=iris, formula=Petal.Length~Petal.Width + Species)
m <- lm(data=iris, formula=Petal.Length~Petal.Width + Species)
m
library(tidyverse)
library(modelr)
m <- lm(data=iris, formula=Petal.Length~Petal.Width)
m <- lm(data=iris, formula=Petal.Length~Petal.Width + Species)
m
summary(m)
rm(iris)
m <- lm(data=iris, Petal.Length~Petal.Width + Species)
iris %>% add_predictions(m) %>% View()
iris %>% add_predictions(m) %>% View()
iris %>% add_predictions(m) %>% View()
m <- lm(data=iris, Petal.Length~Petal.Width + Species)
iris %>% add_predictions(m) %>% View()
ggplot(data=iris) + geom_point(mapping=aes(x=Petal.Width, y=Petal.Length, color=Species))
ggplot(data=iris) + geom_point(mapping=aes(x=Petal.Width, y=Petal.Length, color=Species)) +
geom_line(maping=aes(x=Petal.Width, y=pred, color=Species))
ggplot(data=iris) + geom_point(mapping=aes(x=Petal.Width, y=Petal.Length, color=Species)) +
geom_line(mapping=aes(x=Petal.Width, y=pred, color=Species))
ggplot(data=iris) + geom_point(mapping=aes(x=Petal.Width, y=Petal.Length, color=Species)) + geom_line(mapping=aes(x=Petal.Width, y=pred, color=Species))
iris <- iris %>% add_predictions(m)
ggplot(data=iris) + geom_point(mapping=aes(x=Petal.Width, y=Petal.Length, color=Species)) +
geom_line(mapping=aes(x=Petal.Width, y=pred, color=Species))
# linear regression equation for this
coef(m)
ggplot(data=iris) + geom_point(mapping=aes(x=Petal.Width, y=Petal.Length, color=Species)) +
geom_line(mapping=aes(x=Petal.Width, y=pred, color=Species))
m
m
levels(iris$Species)
rm(iris)
iris <- iris %>% mutate(PW2=Petal.Width^2)
View(iris)
lm(data=iris,Petal.Length~PW2)
iris <- iris %>% add_predictions()
mPW2 <- lm(formula=Petal.Length~PW2, data=iris)
gplot(data=iris) +
geom_point(mapping = aes(x=Petal.Width, y=Petal.Length)) + geom_line(mapping =
aes(x=Petal.Width, y=pred), color="red")
library(tidyverse)
ggplot(data=iris) +
geom_point(mapping = aes(x=Petal.Width, y=Petal.Length)) + geom_line(mapping =
aes(x=Petal.Width, y=pred), color="red")
mPW2 <- lm(formula=Petal.Length~PW2, data=iris)
iris <- iris %>% add_predictions(mPW2)
ggplot(data=iris) +
geom_point(mapping = aes(x=Petal.Width, y=Petal.Length)) + geom_line(mapping =
aes(x=Petal.Width, y=pred), color="red")
mPW2
ggplot(data=iris) + geom_point(mapping=aes(x=Petal.Width, y=resid))
library(modelr)
m <- lm(data=iris, Petal.Length~Petal.Width)
rm(iris)
iris %>% add_residuals(m) %>% View()
iris <- iris %>% add_residuals(m)
View(iris)
ggplot(data=iris) + geom_histogram(mapping=(x=resid))
rstandard(m)
# check for outliers
iris %>% mutate(rstd=rstandard(m)) %>% filter(rstd > 2 | rstd < -2) %>% View()
iris %>% mutate(rstd=rstandard(m)) %>% View()
# check for outliers
iris %>% mutate(rstd=rstandard(m)) %>% filter(rstd > 2 | rstd < -2) %>% View()
library(tidyverse)
library(modelr)
m <- lm(data=iris, Petal.Length~Petal.Width)
rm(iris)
iris %>% add_residuals(m) %>% View()
iris <- iris %>% add_residuals(m)
View(iris)
ggplot(data=iris) + geom_histogram(mapping=(x=resid))
# check for outliers
iris %>% mutate(rstd=rstandard(m)) %>% filter(rstd > 2 | rstd < -2) %>% View()
ggplot(data=iris) + geom_point(mapping=aes(x = Petal.Width, y = Petal.Length))+
geom_point(data = irisOutliers, mapping=aes(x = Petal.Width,
y = Petal.Length), color = "red")
ggplot(data=iris) + geom_point(mapping=aes(x = Petal.Width, y = Petal.Length))+
geom_point(data = irisOutliers, mapping=aes(x = Petal.Width,
y = Petal.Length), color = "red")
irisOutliers <- iris %>% mutate(rstd=rstandard(m)) %>% filter(rstd > 2 | rstd < -2)
ggplot(data=iris) + geom_point(mapping=aes(x = Petal.Width, y = Petal.Length))+
geom_point(data = irisOutliers, mapping=aes(x = Petal.Width,
y = Petal.Length), color = "red")
ggplot(data=iris) + geom_point(mapping=aes(x = Petal.Width, y = Petal.Length)) +
geom_abline(slope=mycf[2], intercept=mycf[1])
ggplot(data=iris) + geom_point(mapping=aes(x = Petal.Width, y = Petal.Length))+
geom_point(data = irisOutliers, mapping=aes(x = Petal.Width,
y = Petal.Length), color = "red") +
geom_abline(slope=mycf[2], intercept=mycf[1])
summary(m3)
m <- lm(data=iris, formula=Petal.Length~Petal.Width)
m <- lm(data=iris, formula=Petal.Length~Petal.Width + Species)
m
summary(m)
# Doing it in R
vec1-vec2
vec1 = c(5,0,-1)
vec2 = c(7,3,5)
# Doing it in R
vec1-vec2
# Doing it in R
sqrt(sum((c(5,0,-1) - c(7,3,5))^2))
sqrt(sum((c(5,0,1) - c(5,1,3))^2))
sqrt(sum((c(5,0,1) - c(6,0,2))^2))
sqrt(sum((c(5,0,1) - c(4,0,2))^2))
sqrt(sum((c(5,0,1) - c(5,1,3))^2))
sqrt(sum((c(5,0,1) - c(5,0,2))^2))
sqrt(sum((c(5,0,1) - c(5,0,2))^2))
sqrt(sum((c(5,0,1) - c(5,1,3))^2))
sqrt(sum((c(5,0,1) - c(6,0,2))^2))
sqrt(sum((c(5,0,1) - c(4,0,2))^2))
sqrt(sum((c(5,0,1) - c(5,1,3))^2))
sqrt(sum((c(5,0,1) - c(5,0,2))^2))
sqrt(sum((c(5,0,1) - c(5,1,3))^2))
sqrt(sum((c(5,0,1) - c(6,0,2))^2))
sqrt(sum((c(5,0,1) - c(4,0,2))^2))
sqrt(sum((c(5,0,1) - c(5,1,3))^2))
sqrt(sum((c(5,0,1) - c(5,0,2))^2))
install.packages("class")
library(class)
# we need to normalize our vectors, so some units don't dominate others
(55000 - 1000) / (100000 - 1000)
# formula = x - min(x) / max(x) - min(x)
(x - min(x)) / (max(x) - min(x))
x <- c(16, 37, 50, 100)
# formula = x - min(x) / max(x) - min(x)
(x - min(x)) / (max(x) - min(x))
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
normalize(x)
View(iris)
iris %>% mutate(Sepal.Length.norm=normalize(Sepal.Length))
# knn 4/4/2023
library(tidyverse)
iris %>% mutate(Sepal.Length.norm=normalize(Sepal.Length))
iris %>% mutate(Sepal.Length.norm=normalize(Sepal.Length)) %>% View()
iris %>% mutate(Sepal.Length.norm=normalize(Sepal.Length)) %>%
mutate(Petal.Length.norm=normalize(Petal.Length)) %>% View()
# each col in table = a dimension
ncol(iris)
library(ggplot2)
library(tidyverse)
preg_v = c(2, 3, 2, 1, 2)
bp_v = c(74, 58, 58, 54, 70)
normalize(preg_v)
normalize(bp_v)
library(tidyverse)
library(ggplot2)
library(modelr)
library(lubridate)
library(Metrics)
library(dplyr)
# ------------------------------
# PROJECT PART 1: DATA WRANGLING
# ------------------------------
# Read in both datasets
covid_data <- read_csv("owid-covid-data.csv")
setwd("C:/Users/danc2/Desktop/SPRING_2023/CPSC_375/375_Project")
library(tidyverse)
library(ggplot2)
library(modelr)
library(lubridate)
library(Metrics)
library(dplyr)
# ------------------------------
# PROJECT PART 1: DATA WRANGLING
# ------------------------------
# Read in both datasets
covid_data <- read_csv("owid-covid-data.csv")
demographics <- read_csv("demographics.csv")
# Keep only the rows where country_code is 3 letters
# demographics <- demographics %>% filter(nchar(`Country Code`) == 3)
covid_data <- covid_data %>%
filter(nchar(iso_code) == 3, population >= 1000000)
# Select all columns BUT Series Name, we don't need this column
demographics <- demographics %>% select(-`Series Name`)
# Remove columns that should not be used for linear modeling
# In our case, cols dealting with death and excess mortality
covid_data <- covid_data %>%
select(-c(total_deaths, new_deaths, total_deaths_per_million,
new_deaths_per_million, new_deaths_smoothed_per_million))
covid_data <- covid_data %>%
select(-c(excess_mortality_cumulative_absolute, excess_mortality_cumulative,
excess_mortality, excess_mortality_cumulative_per_million))
# Add new column new_deaths_smoothed_2wk that has the same values as
# new_deaths_smoothed but two weeks ahead ...
# FIRST copy the data into a new dataframe
covid_data_copy <- covid_data
# Subtract 14 from date field, and rename the new_deaths_smoothed
# field in the copy
covid_data_copy <- covid_data_copy %>% mutate(date=as.Date(date)-14)
covid_data_copy <- covid_data_copy %>%
rename(new_deaths_smoothed_2wk = new_deaths_smoothed)
# Select specific columns to use on the join call
covid_data_copy <- covid_data_copy %>%
select(iso_code, date, new_deaths_smoothed_2wk)
# Join original covid data with copy
covid_data <- covid_data %>% inner_join(covid_data_copy)
# Tidy demographic table as needed
demographics <- demographics %>%
pivot_wider(names_from = `Series Code`, values_from = YR2015)
# Join the two tables together to get ready for linear regression
# demographics %>% inner_join(covid_data, by=c("Country Code"="iso_code"))
covid_data <- covid_data %>%
inner_join(demographics, by=c("iso_code" = "Country Code"))
# -------------------------------
# PROJECT PART 2: LINEAR MODELING
# -------------------------------
# most recently available new deaths per day two weeks ahead
# 2023-03-15 is the last date before we get NAs
recent_new_d_smoothed_2wk <- covid_data %>% filter(!is.na(new_deaths_smoothed_2wk)) %>% group_by(iso_code) %>% top_n(1)
recent_new_d_smoothed_2wk
# most recently available new deaths per day two weeks ahead
# 2023-03-15 is the last date before we get NAs
recent_new_d_smoothed_2wk <- covid_data %>% filter(!is.na(new_deaths_smoothed_2wk)) %>% group_by(iso_code) %>% top_n(-1)
recent_new_d_smoothed_2wk
# most recently available new deaths per day two weeks ahead
# 2023-03-15 is the last date before we get NAs
recent_new_d_smoothed_2wk <- covid_data %>% filter(!is.na(new_deaths_smoothed_2wk)) %>% group_by(iso_code) %>% top_n(-1)
recent_new_d_smoothed_2wk
# most recently available new deaths per day two weeks ahead
# 2023-03-15 is the last date before we get NAs
recent_new_d_smoothed_2wk <- covid_data %>% filter(!is.na(new_deaths_smoothed_2wk)) %>% group_by(iso_code) %>% top_n(1, date)
recent_new_d_smoothed_2wk
ggplot(data=recent_new_d_smoothed_2wk) +
geom_point(mapping=aes(x = new_cases_smoothed, y = new_deaths_smoothed_2wk))
recent_new_d_smoothed <- covid_data %>%
filter(!is.na(new_deaths_smoothed_2wk)) %>% group_by(iso_code) %>%
top_n(1, date)
recent_new_d_smoothed
recent_new_d_smoothed <- covid_data %>%
filter(!is.na(new_deaths_smoothed))%>% group_by(iso_code) %>% top_n(1, date)
recent_new_d_smoothed
View(recent_new_d_smoothed_2wk)
View(recent_new_d_smoothed)
View(recent_new_d_smoothed)
rm(recent_new_d_smoothed)
recent_new_d_smoothed <- covid_data %>%
filter(!is.na(new_deaths_smoothed))%>% group_by(iso_code) %>% top_n(1, date)
ggplot(data=recent_new_d_smoothed) +
geom_point(mapping=aes(x = SP.URB.TOTL, y = new_deaths_smoothed))
ggplot(data=recent_new_d_smoothed_2wk) +
geom_point(mapping=aes(x = new_cases_smoothed, y = new_deaths_smoothed_2wk))
ggplot(data=recent_new_d_smoothed) +
geom_point(mapping=aes(x = SP.URB.TOTL, y = new_deaths_smoothed))
